/**
 *  
 *  This driver is superseded by version 2.7 - go up to my Public-Hubitat-Code directory
 *
 *  Driver Adapted and Developed by JellyGreen
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Driver for Danfoss Ally TRV
 *  Popp ZigBee TRV Thermostat 701721 and the equivalent Hive TRV002
 *  Badged version of Danfoss Ally eTRV 1.18 - White label - Danfoss 014G2463 - note Danfos manufacturing code [mfgCode:0x1246]
 *
 *  Credit to many including, esp ckpt-martin for the work he did on e-cozy zigbee driver from which this was developed
 *  
 *  Version: 1.0 - initial - Date 2022-12-18
 *  Version: 1.1 adds min and max setpoints - Date 2022-12-19
 *  Version: 1.2 adds child locking as a toggle - Date: 2022-12-28
 *  Version: 1.3 changes the child lock from toggle to set - Date 2022-12-28
 *  Version: 1.4 implements eTRVAggressionFactor (read only) and eTRVHeatAvailable and also Switch (on/max and off/min) [by Simon] - Date 2022-12-30
 *  Version: 1.5 implements command code for setting 'heating setpoint' and most remaining attributes (except off-set and schedules) - Date 2023-01-01
 *  Version: 1.6 implements full thermostat reporting (but 'comments-out' ones that are not being used. - Date 2023-01-04
 *
 *  Imortant Note
 *  Chat in HA community identifies a known trouble with the TRV rejecting attempts to write External Sensor Temperature when, as required by the Danfoss spec values are updated regularly.
 *  That problem is not an error in the driver but in the TRV firmware as far as I can tell.
 *  My successful 'work around' for this is to send write -80o as External Sensor Temperature first (turning the feature off) then pause for a few seconds and then send the actual External Sensor Temperature.  
 *  This has been working for me with out any problem.  Hopefully there will be a firmware upgrade that overcomes this issue for good.  
 *
 */
 

metadata {
	definition (name: "POPP TRV Zigbee Driver v1.6", namespace: "jellygreen", author: "jellygreen", singleThreaded: true) {

       
        capability "Battery"                        // has attribute "battery"
        capability "Sensor"
	    capability "ThermostatHeatingSetpoint"     // has attribute "heatingSetpoint
	    capability "TemperatureMeasurement"        // has attribute "temperature"
	    capability "Refresh"
	    capability "Configuration"
        capability "Initialize"
        capability "Switch"                        // has attributes and commands on and off
         
	    command "increaseHeatSetpoint"
	    command "decreaseHeatSetpoint"
        command "changeTRVOrientation", [[name: "Toggle TRV Orientation"]] // default is horizontal
        command "changeTRVViewingDirection", [[name: "Toggle TRV Display Direction"]] // 
        command "changeTRVRadiatorCovered", [[name: "Toggle TRV Covered or UnCovered"]] // default is uncovered
        command "setExternalSensorTemperature", [[name:"External Sensor Temperature", type: "NUMBER", description: "Temperature, °C, or -80 to disable" ] ] //-8000 to disable
        command "setTRVMinHeatSetpointLimit", [[name:"Minimum Heat Setpoint Temperature", type: "NUMBER", description: "Temperature, °C, between 5°C and eTRVMaxHeatSetpointLimit" ] ] //default 5°C
        command "setTRVMaxHeatSetpointLimit", [[name:"Maximum Heat Setpoint Temperature", type: "NUMBER", description: "Temperature, °C, between eTRVMinHeatSetpointLimit and 35°C" ] ] //default 35°C
	    command "setTRVLockState", [[name: "Set Child Lock State", type: "ENUM", constraints: ["unlocked", "locked"]]] // default is unlocked, unlocked
//        command "eTRVAggressionFactor", [[ name: "Set TRV Aggression Factor", type:"NUMBER", description: "1 (fast) to 10 (slow)" ]] // default 1 - bit 4, 1 enable / 0, disable - not yet implemented
        command "setTRVHeatAvailable", [[name: "Set Heat Available, no or yes", type: "ENUM", constraints:["no", "yes"]]] //
        command "setAdaptionRun", [[name: "Trigger / Cancel Adaption Run", type: "ENUM", constraints:["inactive", "initiate", "cancel"]]]
        command "setAdaptionRunSetting", [[name: "Adaption Run Manual / Automatic", type: "ENUM", constraints:["manual", "automatic"]]]
        command "setLoadSharing", [[name: "Load Sharing on/ off", type: "ENUM", constraints:["on", "off"]]] 
        command "setOpenWindowFeature",  [[name: "Open Window Feature on/ off", type: "ENUM", constraints:["off", "on"]]] 
        command "setOpenWindowExtSensor",  [[name: "Open Window External Sensor State", type: "ENUM", constraints:["closed", "open"]]] 
        command "setExerciseDay", [[name: "Exercise Day", type: "ENUM", constraints: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "undefined"]]]                                     
        command "setExerciseTime", [[name: "Exercise Minutes after midnight, max 1439", type:"NUMBER", description: "Minutes after midnight"]]
        command "setMountingModeControl",  [[name: "Mounting Mode Control", type: "ENUM", constraints:["Go to mounting mode", "Go to Mounted position"]]] 
        command "setRegulationOffset", [[ name: "Set TRV Regulation Offset", type:"NUMBER", description: "-2.5°C to +2.5°C in 0.1°C steps" ]]
        
        attribute "eTRVPIHeatingDemand", "number"                 //  0x0201 0x0008 PIHeatingDemand
        attribute "eTRVOrientation", "string"                     //  0x0201 0x4014 eTRV Orientation
        attribute "eTRVHeatingSetpointSource", "number"           //  0x201 0x0030 Setpoint Change Source  // not implemented yet
        attribute "eTRVExternalSensorTemperature", "number"       //  0x0201 0x4015 External Measured Room Sensor
        attribute "eTRVRadiatorCovered", "string"                 //  0x0201 0x4016 Radiator Covered - 0 for NOT covered, 1 for covered
        attribute "eTRVCallingForHeat", "string"                  //  0x0201 0x4031 Heat Supply Request
        attribute "eTRVViewingDirection", "string"                //  0x0204 0x4000 Viewing Direction
        attribute "eTRVMinHeatSetpointLimit", "number"            //  0x0201 0x0015 Min Heat Setpoint Limit / user set minimum, default and lower possible limit is 5°C celsius
        attribute "eTRVMaxHeatSetpointLimit", "number"            //  0x0201 0x0016 Max Heat Setpoint Limit / user set maximum, default and upper possible limit is 35°C celsius
	    attribute "eTRVLockState", "enum", ["unlocked", "locked"] //  0x0204 0x0001 Child Lock, default is unlocked alternative is locked (There are no apparent different levels of locking)
        attribute "eTRVAggressionFactor", "number"                //  0x0201 0x4020 Aggression Factor 1 to 10  0b0000 0001 to 0b0000 1010 note bit 4 0b000x 1 is enable and 0 is disable quick open feature
        attribute "eTRVHeatAvailable", "enum", ["no", "yes"]      //  0x0201 0x4030 Heat Available, 0 for No Heat Available; 1 for Heat Available 
        attribute "eTRVOpenWindowFeature", "enum", ["off", "on"]  //0x0201 0x4051 Open Window Feature on / off
        attribute "eTRVOpenWindowDetected", "enum", ["quarantine", "closed", "imminent", "open", "reported"]   //0x0201 0x4000 TRV Open Window Detection
        attribute "eTRVOpenWindowExtSen", "enum", ["closed", "open"]  // 0x0201 0x4003 TRV Open Window Detection
        attribute "eTRVLoadSharing",  "enum", ["off", "on"]       //  0x0201, 0x4032 TRV Load Balancing Enabled
        attribute "eTRVLoadRadiatorMean", "string"                //  0x0201, 0x4040, TRV Load Radiator Mean        
        attribute "eTRVLoadEstimate", "string"                    //  0x0201, 0x404A TRV Load Estimate for this radiator
        attribute "eTRVRegulationOffset", "number"                //  0x0201, 0x404B TRV Regulation Off-set -in steps of 0.1°C: range –2.5 °C to +2.5 °C (0xE7 … 0x19). 
        attribute "eTRVAdaptionRunControl", "string"              //  0x0201, 0x404C TRV Adaptation Run Control: default 00, 01 for initiate; 02 for cancel
        attribute "eTRVAdaptationRunStatus", "string"             //  0x0201, 0x404D TRV Adaptation Run Status: bit 0 in progress, bit 1 Valve Characteristic found, bit 2 Valve Characteristic lost
        attribute "eTRVAdaptationRunSetting", "enum", ["manual", "automatic"]    //  0x0201, 0x404E TRV Adaptation Run Settings: 00 default; 01 for enabled automatic     
        attribute "eTRVPreheatStatus", "string"                   //  0x0201, 0x404F TRV Preheat Status: 00 for off, 01 for on (default) - reportable
        attribute "eTRVPreheatTime", "string"                     //  0x0201, 0x4050 TRV Preheat Time: Time Stamp, default 00000000, max FFFFFFFF - reportable 
        attribute "eTRVExerciseDay", "enum", ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "undefined"] //TRV Exercise Day 00 for Sunday to 06 for Saturday, 07 for undefined
        attribute "eTRVExerciseTime", "string"                    //  0x0201, 0x4011, TRV Exercise Minutes from midnight max 1439
        attribute "eTRVMountingModeActive", "enum", ["no, mounted", "yes, not mounted or reset"]         //  0x0201, 0x4012, TRV Mounting Mode Active: 00 for mounted and 01 for not mounted or factory reset 
        attribute "eTRVMountingModeControl", "enum", ["Go to mounting mode", "Go to Mounted position"]   //  0x0201, 0x4013, TRV Mounting Mode Control: 00 for Ready for physical mounting on valve, 01 for mounted or as if mounted
                                              
        
        fingerprint profileId: "0104", endpointId: "01", inClusters: "0000,0001,0003,000A,0020,0201,0204,0B05", outClusters: "0000,0019", manufacturer: "D5X84YU", model: "eT093WRO"        
	}

	preferences {
      input (name: "debugLogging", type: "bool", title: "Enable debug message logging", description: "",defaultValue: true)
      input (name: "infoLogging", type: "bool", title: "Enable info message logging", description: "",defaultValue: true)     
	}
}

def installed() {
    state.driverInstalledDateTime = new Date().format("dd/MMM/yyyy hh:mm:ss")
    if (infoLogging) log.info "JellyGreen's driver for ${device.displayName} installed"
}


def initialize(){
    state.driverInitializedDateTime = new Date().format("dd/MMM/yyyy hh:mm:ss")
    if (infoLogging) log.info "JellyGreen's driver for ${device.displayName} initialized"
}

def updated() {
    state.driverUpdatedDateTime = new Date().format("dd/MMM/yyyy hh:mm:ss")
    if (infoLogging) log.info "JellyGreen's driver for ${device.displayName} updated"
    initialize()
}

// parse attribute information which arrives from the device into events
def parse(String description) {
	if (debugLogging) log.debug "Parse description $description"
	def map = [:]
    
    if (description?.startsWith("catchall")) 
    {
       	def descMap = parseDescriptionAsMap(description)
		if (debugLogging) log.debug "Parsing catchall - Desc Map: $descMap" 
    }
    
	else if (description?.startsWith("read attr -")) 
    {
		def descMap = parseDescriptionAsMap(description)
		if (debugLogging) log.debug "Parsing read attr - Desc Map: $descMap"

        if (descMap.cluster == "0001")  // Parse Power Cluster 
        {    
            if (descMap.attrId == "0021") // Battery Percentage Remaining, 0 to 200 in 0.5% steps
		    {
			    map.name = "battery"
                map.unit = "%"
                map.descriptionText = "eTRV Battery percentage remaining"
			    def float batteryPercentage = Integer.parseInt(descMap.value, 16) /2
			    map.value = batteryPercentage
			}
		}        
        
        
        else if (descMap.cluster == "0201")   // Parse Thermostat Cluster 
        {    
            if (descMap.attrId == "0000")     // Local Temperature
		    {
			    map.name = "temperature"
			    if (descMap.value == "8000")  // 0x8000 invalid temperature
			    {
				    map.descriptionText = "-- error --"
			    }			
                else
                {
                    def reversed = zigbee.swapOctets("$descMap.value")
                    def float celsius = Integer.parseInt(reversed, 16) / 100
			        map.value = celsius.round(1)
                    map.unit = "°C"
                    map.descriptionText = "eTRV measured temperature"
                }
 		    }
        
            else if (descMap.attrId == "0008") // PIHeatingDemand, percentage that the valve is open
		        {
			    map.name = "eTRVPIHeatingDemand"
                map.value = Integer.parseInt(descMap.value,16);
                map.unit = "%"
                map.descriptionText = "eTRV valve open, percentage"
                if (debugLogging) log.debug "PIHeatingDemand: $map.value %, where 0% is closed"
                }   

		    else if (descMap.cluster == "0201" && descMap.attrId == "0012") // Heating Set Point
		    {
			map.name = "heatingSetpoint"
			    if (descMap.value == "8000")		//0x8000
			    {
				    map.descriptionText = "-- error --"
			    }
                else
                {
                    def reversed = zigbee.swapOctets("$descMap.value")
                    def float celsius = Integer.parseInt(reversed, 16) / 100
                    map.value = celsius.round(1)
                    map.unit = "°C"
                    map.descriptionText = "eTRV Heating Setpoint"
                }
            } 

            else if (descMap.attrId == "0015") // User Set Minimum Heat Setpoit Limit, Temperature
		    {
			    map.name = "eTRVMinHeatSetpointLimit"
                def reversed = zigbee.swapOctets("$descMap.value")
                def float celsius = Integer.parseInt(reversed, 16) / 100
    	        map.value = celsius.round(1)
                map.unit = "°C"
                map.descriptionText = "eTRV Min Heat Setpoint Limit"
 		    }
        
            else if (descMap.attrId == "0016") // User Set Maximum Heat Setpoit Limit, Temperature
		    {
			    map.name = "eTRVMaxHeatSetpointLimit"
                def reversed = zigbee.swapOctets("$descMap.value")
                def float celsius = Integer.parseInt(reversed, 16) / 100
			    map.value = celsius.round(1)
                map.unit = "°C"
                map.descriptionText = "eTRV max Heat Setpoint Limit"
 		    }
      
            else if (descMap.attrId == "001C") // System Mode, only has heating
		    {
			    map.name = "eTRVSystemMode"
			    if (descMap.value == "04")
			    { 
                    map.value = "heat"
                    map.descriptionText = "eTRV System Mode"
			    }
			    else
			    {
				    map.value = "error"
                    map.descriptionText = "eTRV System Mode - can only be 04, heat"
			    }
		    }

		    else if (descMap.attrId == "0030") // TRV Setpoint Change Source 
		    {
			    map.name = "eTRVHeatingSetpointSource"
                map.descriptionText = "eTRV Setpoint Change Source "
                if (descMap.value == "00") {map.value = "manual"}
                else if (descMap.value == "01") {map.value = "eTRVSchedule"}
                else if (descMap.value == "02") {map.value = "software"}                
                else {if (debuglogging) log.debug "invalid eTRVHeatingSetpointSource"}
            }            
            
            
            else if (descMap.attrId == "4000")   // "eTRVOpenWindowDetected", "enum", ["Quarantine", "Closed", "Imminent", "Open", "Reported"]
            {
                map.name = "eTRVOpenWindowDetected"
                map.descriptionText = "eTRV Open Window Detected"
			    if (descMap.value == "00") {map.value = "quarantine"}
			    else if (descMap.value == "01") {map.value = "closed"}
            	else if (descMap.value == "02") {map.value = "imminent"}
            	else if (descMap.value == "03") {map.value = "open"}
            	else if (descMap.value == "04") {map.value = "reported"}
                else {if (debuglogging) log.debug "invalid eTRVOpenWindowDetected"}                
            }        

		    else if (descMap.attrId == "4003")  //  attribute "eTRVWindowExtSen", "enum", ["closed", "open"]
		    {
			    map.name = "eTRVOpenWindowExtSen"
                map.descriptionText = "eTRV Open Window External Sensor"
			    if (descMap.value == "00") {map.value = "closed"}
			    else if (descMap.value == "01") {map.value = "open"}
                else {if (debuglogging) log.debug "invalid eTRVOpenWindowExtSen"}
            }            

            else if (descMap.attrId == "4010") //RW TRV Exercise Day 00 for Sunday to 06 for Saturday, 07 for undefined
		    {
			    map.name = "eTRVExerciseDay"
                map.descriptionText = "eTRV Exercise Day"
			    if (descMap.value == "00") {map.value = "Sunday"}
			    else if (descMap.value == "01") {map.value = "Monday" }
                else if (descMap.value == "02") {map.value = "Tuesday" }
                else if (descMap.value == "03") {map.value = "Wednesday" }
                else if (descMap.value == "04") {map.value = "Thursday" }
                else if (descMap.value == "05") {map.value = "Friday" }
                else if (descMap.value == "06") {map.value = "Saturday" }
                else if (descMap.value == "07") {map.value = "undefined" }
                else {if (debuglogging) log.debug "invalid eTRV Exercise Day value: $descMap.value"}
            }
            
            else if (descMap.attrId == "4011") // TRV Exercise Minutes from midnight   
		    {
			    map.name = "eTRVExerciseTime"
                map.descriptionText = "eTRV Minute after midnight"
                map.value = ""
                def String reversed = zigbee.swapOctets("$descMap.value")
                def int tempInt = Integer.parseInt(reversed, 16)
                if ((tempInt >= 0) && (tempInt <= 1439)) 
                    {
                    def int wholeHours
                    wholeHours = tempInt.intdiv(60)
                    def String remainingMinutes
                    tempInt = (tempInt - (wholeHours * 60))
                    remainingMinutes = String.format("%02d", tempInt)
                    if (wholeHours < 12)                       
                        {map.value = "$wholeHours" + ":" + remainingMinutes + "am"}
                    else  
                        {
                            wholeHours -= 12
                            map.value = "$wholeHours" + ":" + remainingMinutes + "pm"
                        }
                    }
                else {if (debuglogging) log.debug "invalid TRV Exercise Minute after midnight value: $descMap.value"}
            }
               
            else if (descMap.attrId == "4012") // eTRV Mounting Mode Active: 00 for mounted and 01 for not mounted or factory reset 
		    {
			    map.name = "eTRVMountingModeActive"
                map.descriptionText = "eTRV Moiunting Mode Active"
			    if (descMap.value == "00") {map.value = "no, mounted"}
			    else if (descMap.value == "01") {map.value = "yes, not mounted or reset" }
                else {if (debuglogging) log.debug "invalid TRV Mounting Mode value: $descMap.value"}
            }

            else if (descMap.attrId == "4013") // eTRV Mounting Mode Control: 00 for Ready for physical mounting on valve, 01 for mounted or as if mounted   
		    {
			    map.name = "eTRVMountingModeControl"
                map.descriptionText = "eTRV orientation"
			    if (descMap.value == "00") {map.value = "Go to mounting mode"}
			    else if (descMap.value == "01") {map.value = "Go to Mounted position" }
                else {if (debuglogging) log.debug "invalid eTRVMountingModeControl value: $descMap.value"}
            }
            
                else if (descMap.attrId == "4014") // eTRV orientation - 0, horizontal and 1, vertical
		    {
			    map.name = "eTRVOrientation"
                map.descriptionText = "eTRV orientation"
			    if (descMap.value == "00") {map.value = "horizontal"}
			    else if (descMap.value == "01") {map.value = "vertical" }
                else {if (debuglogging) log.debug "invalid eTRVOrientation"}
            }        

		    else if (descMap.attrId == "4015") // External Senor Temperature
		    {
                map.name = "eTRVExternalSensorTemperature"
			    map.unit = "°C"
                def reversedValue = zigbee.swapOctets("$descMap.value")
                if (reversedValue == "E0C0")		//reversed octets for signed 16 bit integer -8000
			    {
				    map.descriptionText = "eTRV External Sensor Temperature function,disabled"
                    map.value = -80
                }
                else
                {
                    map.descriptionText = "eTRV External Sensor Temperature"
                    def float celsius = Integer.parseInt(reversedValue, 16) / 100
                    map.value = celsius.round(1)
                }
            }         
/**
Danfos Specification Notes: For implementing in Apps
If Radiator Covered Attribute [0x4016] = 'not covered', recommended temperature from external sensor is sent to TRV [0x4015] at least every 3 hours but not more often than every 30 minutes @ every 0,1K change;
after 3 hours the function is disabled and goes back to standard mode.
If Radiator Covered Attribute  [0x4016] = 'covered', recommended temperature from external sensor is sent to TRV [0x4015] at least every 30 minutes but not more often than every 5 minutes @ every 0,1K change;
after 35 minutes the function is disabled and goes back to standard mode. 
The value -8000 disables the function.
NB - see note at top regarding TRV failure to read regular updated of External Sensor Temperature
**/

		    else if (descMap.attrId == "4016") // eTRV Radiator Covered Attribute - 00 for notCovered and 01 for covered
		    {
			    map.name = "eTRVRadiatorCovered"
			    if (descMap.value == "00")
			    {
				    map.value = "notCovered"
                    map.descriptionText = "Radiator Not Covered"
			    }
			    else
			    {
				    map.value = "covered"
                    map.descriptionText = "Radiator Covered"
			    }
		    }
        
            else if (descMap.attrId == "4020") // eTRV Aggression factor
		    {

			    map.name = "eTRVAggressionFactor"
                map.value = Integer.parseInt(descMap.value,16);
                map.descriptionText = "eTRV aggression factor, scale 1 to 10"
                if (debugLogging) log.debug "eTRVAggressionFactor: $map.value where 1 is fast and default"
            }
 
            else if (descMap.attrId == "4030") // eTRV Heat Available  00 for no and 01 for yes
		    {
			    map.name = "eTRVHeatAvailable"
                map.descriptionText = "eTRV Heat Available"
			    if (descMap.value == "00") {map.value = "no"}
			    else if (descMap.value == "01") {map.value = "yes"}
                else {if (debuglogging) log.debug "invalid eTRVOpenWindowDetected"}  
		    } 
        
		    else if (descMap.attrId == "4031") // eTRV Calling for heat - 00 for no and 01 for yes
		    {
			    map.name = "eTRVCallingForHeat"
                map.descriptionText = "eTRV Calling for heat"
			    if (descMap.value == "00") {map.value = "no"}
			    else if (descMap.value == "01") {map.value = "yes"}
                else {if (debuglogging) log.debug "invalid eTRVOpenWindowDetected"}  
		    }   

		    else if (descMap.attrId == "4032") // TRV Load Balancing Enabled:  00 disabled (radiator acts alone); 01 default on     
		    {
			    map.name = "eTRVLoadSharing"
                map.descriptionText = "eTRV Load Sharing"
			    if (descMap.value == "00") {map.value = "off"}
			    else if (descMap.value == "01") {map.value = "on"}
                else {if (debuglogging) log.debug "invalid Load Balancing Enabled value: $descMap.value"}
            }
         
		    else if (descMap.attrId == "4040") // TRV Load Radiator Mean  
		    {
			    map.name = "eTRVLoadRadiatorMean"
                map.descriptionText = "eTRV Load Radiator Mean"
			    map.value = zigbee.swapOctets(descMap.value)
                if (map.value == "E0C0") {map.value = "not set"}
            }            

		    else if (descMap.attrId == "404A") // TRV Load Estimate for this radiator
		    {
			    map.name = "eTRVLoadEstimate"
                map.descriptionText = "eTRV Load Estimate"
			    map.value = zigbee.swapOctets(descMap.value)
                if (map.value == "E0C0") {map.value = "not set"}
            }

		    else if (descMap.attrId == "404B") // TRV Regulation Off-set -in steps of 0.1°C: range –2.5 °C to +2.5 °C (0xE7 … 0x19).  
		        {
                if (descMap.value != null)
                    {
                    map.name = "eTRVRegulationOffset"
                    map.descriptionText = "eTRV Regulation Offset"
                    map.units = "°C"
                    def int tempInteger = zigbee.convertHexToInt(descMap.value)
                    if (tempInteger > 127) { tempInteger = ((tempInteger - 256))}
                    def float tempFloat = tempInteger
                    tempFloat /= 10 
                    if ((tempFloat >= -2.5) && (tempFloat <=2.5)) {map.value = tempFloat}
                    else {map.value = -80}
                    }
               }

		    else if (descMap.attrId == "404C") // TRV Adaptation Run Control: default 00, 01 for initiate; 02 for cancel
		    {
			    map.name = "eTRVAdaptionRunControl"
                map.descriptionText = "eTRV Adaptation Run Control"
			    if (descMap.value == "00") {map.value = "inactive"}
			    else if (descMap.value == "01") {map.value = "initiate"}
                else if (descMap.value == "02") {map.value = "cancel"} 
                else {if (debuglogging) log.debug "invalid Adaptation Run Control value: $descMap.value"}
            }

		    else if (descMap.attrId == "404D") // TRV Adaptation Run Status: bit 0 in progress, bit 1 Valve Characteristic found, bit 2 Valve Characteristic lost
		    {
                map.name = "eTRVAdaptationRunStatus"
                map.descriptionText = "eTRV Adaptation Run Status"
                map.value = " $descMap.value"
			    if ((descMap.value == "01") ||(descMap.value == "03") || (descMap.value == "05") || (descMap.value == "07"))  {map.value = map.value +", progessing"}
                else {map.value = map.value + ", inactive"}
                if ((descMap.value == "02") ||  (descMap.value == "03"))    {map.value = map.value + ", ch. found"}
                else if ((descMap.value == "04") || (descMap.value == "05"))  {map.value = map.value + ", ch. lost"} 
                else {if (debuglogging) log.debug "invalid Adaptation Run Status: $descMap.value"}
            }
   
		    else if (descMap.attrId == "404E") // TRV Adaptation Run Settings: 00 default; 01 for enabled automatic
		    {
			    map.name = "eTRVAdaptationRunSetting"
                map.descriptionText = "eTRV Adaptation Run Setting"
			    if (descMap.value == "00") {map.value = "manual"}
			    else if (descMap.value == "01") {map.value = "automatic"}
                else {if (debuglogging) log.debug "invalid Adaptation Run Setting: $descMap.value"}
            }

		    else if (descMap.attrId == "404F") // TRV Preheat Status: 00 for off, 01 for on (default) - reportable
		    {
			    map.name = "eTRVPreheatStatus"
                map.descriptionText = "eTRV Preheat Status"
			    if (descMap.value == "00") {map.value = "off"}
			    else if (descMap.value == "01") {map.value = "on"}
                else {if (debuglogging) log.debug "invalid eTRV Preheat Status: $descMap.value"}
            }

		    else if (descMap.attrId == "4050") // TRV Preheat Time: Time Stamp, default 00000000, max FFFFFFFF - reportable 
		    {
			    map.name = "eTRVPreheatTime"
                map.descriptionText = "eTRV Preheat Time"
			    map.value = descMap.value
            }

            else if (descMap.attrId == "4051") // eTRV Window Open Feature - 00 for off and 01 for on
		    {
			    map.name = "eTRVOpenWindowFeature"
                map.descriptionText = "eTRV Open Window Feature On/Off"
			    if (descMap.value == "00")
			    {
				    map.value = "off"
			    }
			    else
			    {
				    map.value = "on"
			    }
		    }  
            
        }
        
		else if (descMap.cluster == "0204")   // Parse Thermostat Display Cluster
        {        
            if (descMap.attrId == "0001") // eTRV child lock state, 00, unlocked 01 to 05 locked
		    {
			    map.name = "eTRVLockState"
			    if (descMap.value == "00")
			    {
				    map.value = "unlocked"
				    map.descriptionText = "eTRV Child Lock State: unlocked, $descMap.value"
			    }
			    else if ((descMap.value == "01") || (descMap.value == "02") || (descMap.value == "03") || (descMap.value == "04") || (descMap.value == "05"))
			    {
				    map.value = "locked"
                    map.descriptionText = "eTRV Child Lock State: locked, $descMap.value"
			    }
			    else 
                {
	            if (debugLogging) log.debug "invalid lock value $descMap.value"   
                }
		    }
		
		
		   else if (descMap.attrId == "4000") // eTRV Viewing Direction, 0 for normal, 1 for inverted
		   {
			    map.name = "eTRVViewingDirection"
            	map.descriptionText = "eTRV Viewing Direction"
			    if (descMap.value == "00")
			    {
				    map.value = "normal"
			    }
			    else
			    {
				    map.value = "inverted"
                    map.descriptionText = "eTRV Viewing Direction: 1, inverted"
			    }
		    } 
        }
        
	    def result = null
	    if (map) 
            {
            result = sendEvent(name: map.name, value: map.value , unit: map.unit, descriptionText: map.descriptionText)
	        }
	        if (debugLogging) log.debug "Parse returned $map"
	        return result
    }
}  //End Of Parse Method
    

def parseDescriptionAsMap(description) {
	(description - "read attr - ").split(",").inject([:]) { map, param ->
		def nameAndValue = param.split(":")
		map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]
	}
}


//   

/**
This is now superseded by use of the zigbee.command based method, immediately below

def setHeatingSetpoint(degrees) {
   	float maxSetpoint = device.currentValue("eTRVMaxHeatSetpointLimit")
   	float minSetpoint = device.currentValue("eTRVMinHeatSetpointLimit")    
    if ((degrees != null) && (degrees <= maxSetpoint) && (degrees >= minSetpoint))
    {
        int zigbeeTemp;
		zigbeeTemp = (Math.round(degrees * 100))
            if (infoLogging) log.info "setHeatingSetpoint ${zigbeeTemp / 100} celsius"
		def cmds =
			zigbee.writeAttribute(0x201, 0x12, 0x29, zigbeeTemp) +  //write Heating Setpoint
			zigbee.readAttribute(0x201, 0x12)	//read Heating Setpoint
		return cmds
	}
    else
    {
        if (infoLogging) log.info "proposed setpoint is outside permitted limits or is null"
    }
}
**/

def setHeatingSetpoint(degrees) {
   	float maxSetpoint = device.currentValue("eTRVMaxHeatSetpointLimit")
   	float minSetpoint = device.currentValue("eTRVMinHeatSetpointLimit")    
    if ((degrees != null) && (degrees <= maxSetpoint) && (degrees >= minSetpoint))
    {
        def String commandSpeed = "01"  // 00 slow, 01 fast
        int zigbeeTemp
		zigbeeTemp = (Math.round(degrees * 100))
            if (infoLogging) log.info "setHeatingSetpoint ${zigbeeTemp / 100} celsius; command speed : $commandSpeed"
        def String payloadTemp = zigbee.convertToHexString(zigbeeTemp,4)
        payloadTemp = zigbee.swapOctets(payloadTemp)
        
        def String payload = commandSpeed+" $payloadTemp"

        if (debugLogging) log.debug "my payload is: $payload"

		def cmds =
            zigbee.command(0x201, 0x40, ["mfgCode": 0x1246], 2000, payload) +  //write using cluster command - 2000 is a 2second delay
			zigbee.readAttribute(0x201, 0x12)	//read Heating Setpoint
                if (debugLogging) log.debug "my command is: $cmds"
		return cmds
	}
    else
    {
        if (infoLogging) log.info "proposed setpoint is outside permitted limits or is null"
    }
}


def increaseHeatSetpoint() {
 	float currentSetpoint = device.currentValue("heatingSetpoint")
    if (debugLogging) log.debug "currentSetpoint = $currentSetpoint"
   	float maxSetpoint = device.currentValue("eTRVMaxHeatSetpointLimit")
        if (debugLogging) log.debug "maxSetpoint = $maxSetpoint"
   	float step = 1
	if (currentSetpoint < maxSetpoint)
	{
		currentSetpoint = currentSetpoint + step
		setHeatingSetpoint(currentSetpoint)
        /** Alternative for last two lines, using cluster command
            def String payload = "00 0A" // adjust heating setpoint +1 degrees '0A' is ten tenths of a degree, could do '05'
            def cmds =
                zigbee.command(0x201, 0x00, [:], 0, payload) +  //write using cluster command
		        zigbee.readAttribute(0x201, 0x12)	//read Heating Setpoint
            if (debugLogging) log.debug "my command is: $cmds"
	        return cmds
        **/
	}
    else
    {
        if (infoLogging) log.info "eTRVMaxHeatSetpointLimit limit reached"
    }
}

def decreaseHeatSetpoint() {
    float currentSetpoint = device.currentValue("heatingSetpoint")
    if (debugLogging) log.debug "currentSetpoint = $currentSetpoint"
   	float minSetpoint = device.currentValue("eTRVMinHeatSetpointLimit")
        if (debugLogging) log.debug "minSetpoint = $minSetpoint"
	float step = 1
   	if (currentSetpoint > minSetpoint)
   	{
		currentSetpoint = currentSetpoint - step
		setHeatingSetpoint(currentSetpoint)
        /** Alternative for last two lines, using cluster command
        def String payload = "00 F6"  // adjust heating setpoint +1 degrees 'F6' is negative ten tenths of a degree, could do 'FB' for -0.5
        def cmds =
            zigbee.command(0x201, 0x00, [:], 0, payload) +  //write using cluster command
		    zigbee.readAttribute(0x201, 0x12)	//read Heating Setpoint
        if (debugLogging) log.debug "my command is: $cmds"
	    return cmds
        **/
   	}
    else
    {
        if (infoLogging) log.info "eTRVMinHeatSetpointLimit limit reached"
    }
}

def setTRVMinHeatSetpointLimit(degrees) {
   	float maxSetpoint = device.currentValue("eTRVMaxHeatSetpointLimit")
	if ((degrees != null) && (degrees >= 5) && (degrees < maxSetpoint))
    {
        int zigbeeTemp
		zigbeeTemp = (Math.round(degrees * 100))
        if (infoLogging) log.info "eTRVMinHeatSetpointLimit ${zigbeeTemp / 100} celsius"
		def cmds =
		    zigbee.writeAttribute(0x201, 0x0015, 0x29, zigbeeTemp) +  //write Min Heat Setpoint Limit
			zigbee.readAttribute(0x201, 0x0015)	//  Min Heat Setpoint Limit
		return cmds
     }
}

def setTRVMaxHeatSetpointLimit(degrees) {
   	float minSetpoint = device.currentValue("eTRVMinHeatSetpointLimit")
	if ((degrees != null) && (degrees <= 35) && (degrees >= minSetpoint))
    {
        int zigbeeTemp
		zigbeeTemp = (Math.round(degrees * 100))
        if (infoLogging) log.info "eTRVMaxHeatSetpointLimit ${zigbeeTemp / 100} celsius"
		def cmds =        
		    zigbee.writeAttribute(0x201, 0x0016, 0x29, zigbeeTemp) +  //write Max Heat Setpoint Limit
		    zigbee.readAttribute(0x201, 0x0016)	//  Max Heat Setpoint Limit
		return cmds
	}
}

def setOpenWindowExtSensor(settingValue) {
    def int newSetting = 0
    if (settingValue == "closed") {newSetting = 0}   // 0 for closed
    else if (settingValue == "open") {newOpenWindowFeatureSetting = 1}   // 1 for open
    def cmds =
			zigbee.writeAttribute(0x201, 0x4003, 0x10, newOpenWindowFeatureSetting, [mfgCode:0x1246], 0) +  // write Open Window External Sensor setting
			zigbee.readAttribute(0x0201, 0x4003, [mfgCode:0x1246])	//read Open Window External Sensor state
    return cmds
}

def setExerciseDay(settingValue) {
    def int newSetting = 0
    if (settingValue == "Sunday") {newSetting = 00}   
    else if (settingValue == "Monday") {newSetting = 01}   
    else if (settingValue == "Tuesday") {newSetting = 02}   
    else if (settingValue == "Wednesday") {newSetting = 03}   
    else if (settingValue == "Thursday") {newSetting = 04}   
    else if (settingValue == "Friday") {newSetting = 05}   
    else if (settingValue == "Saturday") {newSetting = 06}   
    else if (settingValue == "undefined") {newSetting = 07}
    else {return}
    def cmds =
			zigbee.writeAttribute(0x201, 0x4010, 0x30, newSetting, [mfgCode:0x1246], 0) +  // write TRV Exercise Day
			zigbee.readAttribute(0x0201, 0x4010, [mfgCode:0x1246])	//read TRV Exercise Day
    return cmds    
}

def setExerciseTime(settingValue) {

    if ((settingValue != null) && (settingValue >= 0000) && (settingValue <=1439))  
    { 
        short zigbeeTemp;
		zigbeeTemp = (Math.round(settingValue))
        if (debugLogging) log.debug "exercise minute zigbeeTemp: $zigbeeTemp"
        def cmds =
		    zigbee.writeAttribute(0x201, 0x4011, 0x21, zigbeeTemp, [mfgCode:0x1246], 0) +  // write Exercise Minute after midnight
			zigbee.readAttribute(0x0201, 0x4011, [mfgCode:0x1246])	//read TRV Exercise Minute
    return cmds
    }   
    else {if (debuglogging) log.debug "invalid Exercise Minute value: $settingValue"}
} 

def setMountingModeControl(settingValue) {
    def int newSetting = 0
    if (settingValue == "Go to mounting mode") {newSetting = 0}   // 0 for "ready to mount"
    else if (settingValue == "Go to Mounted position") {newSetting = 1}   // 1 for "mounted or as if mounted"
    def cmds =
			zigbee.writeAttribute(0x201, 0x4013, 0x10, newSetting, [mfgCode:0x1246], 0) +  // write RV Mounting Mode Control value
			zigbee.readAttribute(0x0201, 0x4013, [mfgCode:0x1246])	//read RV Mounting Mode Control
    return cmds
}


def changeTRVOrientation() {
    def String currentOrientation = device.currentValue("eTRVOrientation")
    def int newOrientationCode = 0
    if (currentOrientation == "vertical")
    {    currentOrientation = "horizontal"
         newOrientationCode = 0             // 0 for horizontal
    }
    else 
     {   currentOrientation = "vertical"
         newOrientationCode = 1            // 1 for vertical
     }
    def cmds =
			zigbee.writeAttribute(0x201, 0x4014, 0x10, newOrientationCode, [mfgCode:0x1246], 0) +  // write new orientation to TRV
			zigbee.readAttribute(0x0201, 0x4014, [mfgCode:0x1246])	//read TRV Orientation 
    return cmds
}

def setExternalSensorTemperature(degrees) {
	if (degrees != null) {
		int zigbeeTemp = (Math.round(degrees * 100))
        if (infoLogging) log.info "setExternalSensorTemperature ${zigbeeTemp/100} celsius"
		//def celsius = zigbeeTemp /100
		def cmds =
			zigbee.writeAttribute(0x201, 0x4015, 0x29, zigbeeTemp, [mfgCode:0x1246], 2000) +
			zigbee.readAttribute(0x201, 0x4015, [mfgCode:0x1246])	//Read eTRVExternalSensorTemperature
		return cmds
	}
}

def changeTRVRadiatorCovered() {
    def String currentCoveredState = device.currentValue("eTRVRadiatorCovered")
    def int newCoveredStateCode = 0
    if (currentCoveredState == "covered")
    {    currentCoveredState = "notCovered"
         newCoveredStateCode = 0         // 0 for notCovered
    }
    else
     {   currentCoveredState = "covered"
         newCoveredStateCode = 1        // 1 for covered
     }
    def cmds =
			zigbee.writeAttribute(0x201, 0x4016, 0x10, newCoveredStateCode, [mfgCode:0x1246], 0) +  // write new radiator covered attribute
			zigbee.readAttribute(0x0201, 0x4016, [mfgCode:0x1246])	//read radiator covered attribute
    return cmds
}

def setLoadSharing(settingValue) {
    def int newLoadSharingSetting = 0
    if (settingValue == "off") {newLoadSharingSetting = 0}   // 0 for off
    else if (settingValue == "on") {newLoadSharingSetting = 1}   // 1 for on
    def cmds =
			zigbee.writeAttribute(0x201, 0x4032, 0x10, newLoadSharingSetting, [mfgCode:0x1246], 0) +  // write new Load Sharing Setting
			zigbee.readAttribute(0x0201, 0x4032, [mfgCode:0x1246])	//read Load Sharing Setting
    return cmds
}

def setRegulationOffset(enteredValue)
{
    float tempFloat = enteredValue
    if ((tempFloat >= -2.5) && (tempFloat <=2.5))
    {
    tempFloat *= 10
    def int tempInteger
    tempInteger = Math.rint(tempFloat)
    def cmds =
			zigbee.writeAttribute(0x201, 0x404B, 0x28, tempInteger, [mfgCode:0x1246], 0) +  // write regulation offset
			zigbee.readAttribute(0x0201, 0x404B, [mfgCode:0x1246])	//read regulation offset
    return cmds  
    }
    else if (infoLogging) log.info "invalid regulation offset"
}


def setAdaptionRun(controlValue) {
    def int newAdaptionRunCode = 0
    if (controlValue == "inactive") {newAdaptionRunCode = 0}   // 0 for inactive
    else if (controlValue == "initiate") {newAdaptionRunCode = 1}   // 1 for initiate
    else if (controlValue == "cancel") {newAdaptionRunCode = 2}   // 2 for cancel
    def cmds =
			zigbee.writeAttribute(0x201, 0x404C, 0x30, newAdaptionRunCode, [mfgCode:0x1246], 0) +  // write new Adaption Run Code
			zigbee.readAttribute(0x0201, 0x404C, [mfgCode:0x1246])	//read Adaption Run Code
    return cmds
}

def setAdaptionRunSetting(settingValue) {
    def int newAdaptionRunSetting = 0
    if (settingValue == "manual") {newAdaptionRunSetting = 0}   // 0 for manual
    else if (settingValue == "automatic") {newAdaptionRunSetting = 1}   // 1 for automatic, during the night
    def cmds =
			zigbee.writeAttribute(0x201, 0x404E, 0x18, newAdaptionRunSetting, [mfgCode:0x1246], 0) +  // write new Adaption Run Code
			zigbee.readAttribute(0x0201, 0x404E, [mfgCode:0x1246])	//read Adaption Run Code
    return cmds
}

def changeTRVViewingDirection()   
{
    def String currentViewingDirection = device.currentValue("eTRVViewingDirection")
    def int newViewingDirectionCode = 0
    if (currentViewingDirection == "inverted")
    {    currentViewingDirection = "normal"
         newViewingDirectionCode = 0        // 0 for normal
    }
    else
     {   currentViewingDirection = "normal"
         newViewingDirectionCode = 1        // for inverted
     }
    def cmds =
			zigbee.writeAttribute(0x204, 0x4000, 0x30, newViewingDirectionCode, [mfgCode:0x1246], 0) +  // write new TRV Display Viewing Direction attribute
			zigbee.readAttribute(0x0204, 0x4000, [mfgCode:0x1246])	//read TRV Display Viewing Direction
    return cmds
}

def setTRVHeatAvailable(selectedState)   
{
    def int newHeatAvailableCode = 0
    if (selectedState == "no") {newHeatAvailableCode = 0}
    else if (selectedState == "yes") {newHeatAvailableCode = 1}
    else {
         if (debugLogging) log.debug "invalid parameter selectedState: $selectedState"    // only "no" or "yes" allowed
         return
         }     
    def cmds =
			zigbee.writeAttribute(0x201, 0x4030, 0x10, newHeatAvailableCode, [mfgCode:0x1246], 0) +  // write new TRV Heat Available attribute
			zigbee.readAttribute(0x0201, 0x4030, [mfgCode:0x1246])	//read TRV Heat Available Attribute
    return cmds
}

def setOpenWindowFeature(settingValue) {
    def int newOpenWindowFeatureSetting = 0
    if (settingValue == "off") {newOpenWindowFeatureSetting = 0}   // 0 for off
    else if (settingValue == "on") {newOpenWindowFeatureSetting = 1}   // 1 for on
    def cmds =
			zigbee.writeAttribute(0x201, 0x4051, 0x10, newOpenWindowFeatureSetting, [mfgCode:0x1246], 0) +  // write Open Window Feature on / off setting
			zigbee.readAttribute(0x0201, 0x4051, [mfgCode:0x1246])	//read Open Window Feature on / off
    return cmds
}


def setTRVLockState(selectedState){
        def int newLockStateCode = 0
        if (selectedState == "unlocked") {newLockStateCode = 0}
        else if (selectedState == "locked") {newLockStateCode = 1}
        else {
            if (debugLogging) log.debug "invalid parameter selectedState: $selectedState"    // only "unlocked" or "locked" allowed
            return
            }    
	    def cmds =
			zigbee.writeAttribute(0x204, 0x0001, 0x30, newLockStateCode) +  // write new Lock State Code attribute
			zigbee.readAttribute(0x0204, 0x0001)	//read TRV Lock State
    	return cmds
}

def off() {
if (device.currentValue("heatingSetpoint") != device.currentValue("eTRVMinHeatSetpointLimit"))
setHeatingSetpoint(device.currentValue("eTRVMinHeatSetpointLimit"))
}

def on() {
if (device.currentValue("heatingSetpoint") != device.currentValue("eTRVMaxHeatSetpointLimit"))
setHeatingSetpoint(device.currentValue("eTRVMaxHeatSetpointLimit"))
}
                                        
def modeHeat() {
    if (infoLogging) log.info "modeHeat method called: $cmds"    // Is there any use for this method?  
    def cmds =
	zigbee.writeAttribute(0x201, 0x001C, 0x30, 0x04) +
    zigbee.readAttribute(0x201, 0x001C)
    return cmds
}

def configure() {
	def cmds =
/**     Configure reporting frequency for TRV attributes that report their own changes or regularly confirm their condition - 
        Attribute ID, Data Type, Payload (Min report, Max report, On change trigger)
        Attribute ID
        Data Types: - see table 2.10 in Zigbee Spec  - U8BIT, 0x20; S16BIT, 0x29; 8 bits enum, 0x30; boolean, 0x10; 8bit map, 0x18
        Payload (Min reporting period in seconds - TRV will not report this attribute more frequently than this, 
                 Max reporting period in seconds - TRV will report at least this often even if not change in value, 
                 On change trigger - subject to Min and Max, TRV will report if attribute value (i.e. zigbee coded data value for that attribute) changes by this amount)
**/
        //Cluster ID (0x0201 = Thermostat Cluster), 
        zigbee.configureReporting(0x0201, 0x0000, 0x29, 300, 3600, 10) + 	 //Attribute ID 0x0000 = local temperature, Data Type: S16BIT
        zigbee.configureReporting(0x0201, 0x0008, 0x20, 300, 43200, 5) +     //Attribute ID 0x0008 = pi heating demand, Data Type: U8BIT
        zigbee.configureReporting(0x0201, 0x0012, 0x29, 1, 3600, 10) +  	 //Attribute ID 0x0012 = occupied heat setpoint, Data Type: S16BIT
        zigbee.configureReporting(0x0201, 0x0030, 0x30, 1, 0, 1) +  	     //Attribute ID 0x0012 = TRV Setpoint Change Source
        zigbee.configureReporting(0x0201, 0x4000, 0x30, 60, 43200, 1) +  	 //Attribute ID 0x4000 = TRV Open Window Detection
        zigbee.configureReporting(0x0201, 0x4012, 0x10, 1, 0, 1) +  	     //Attribute ID 0x4012 = TRV Mounting Mode Active, Data Type: Boolean
        zigbee.configureReporting(0x0201, 0x4031, 0x10, 60, 3600, 1) +       //Attribute ID 0x4031 = TRV Call for heat, Data Type: Boolean - [mfgCode:0x1246]
        zigbee.configureReporting(0x0201, 0x404A, 0x29, 300, 7200, 100) +    //Attribute ID 0x404A = Load estimate on this radiator
        zigbee.configureReporting(0x0201, 0x404D, 0x18, 60, 43200, 1) +      //Attribute ID 0x404D = eTRV Adaption Run Status
//        zigbee.configureReporting(0x0201, 0x404F, 0x10, 60, 0, 1) +          //Attribute ID 0x404F   = Preheat Status     
//        zigbee.configureReporting(0x0201, 0x4050, 0x23, 60, 0, 1) +          //Attribute ID 0x4050   = Preheat Time           
        
        //Cluster ID (0x0001 = Power Cluster)
		zigbee.configureReporting(0x0001, 0x0021, 0x20, 300, 43200, 4) 	    //Attribute ID 0x0021 = battery percentage, Data Type: U8BIT
	
	if (debugLogging) log.debug "configure() --- cmds: $cmds"
    state.driverConfiguredDateTime = new Date().format("dd/MMM/yyyy hh:mm:ss")
	return refresh() + cmds
}


def refresh() {
	def cmds =
        //On refresh(), read these TRV attributes                   // all the selected attributes must be interpreted in the parse() method

        //Power Cluster Attributes    
        zigbee.readAttribute(0x0001, 0x0021) +                      //Read Battery percentage
       
        //Thermostat Cluster Attributes
        zigbee.readAttribute(0x201, 0x0000) +	                    //Read LocalTemperature
//        zigbee.readAttribute(0x201, 0x0003) +	                    //Read AbsMinHeatSetpointLimit - no point factory set at 5 degrees
//		  zigbee.readAttribute(0x201, 0x0004) +	                    //Read AbsMaxHeatSetpointLimit - no point factory set at 35 degrees
        zigbee.readAttribute(0x201, 0x0008) +	                    //Read PIHeatingDemand
		zigbee.readAttribute(0x201, 0x0012) + 	                    //Read OccupiedHeatingSetpoint
		zigbee.readAttribute(0x201, 0x0015) + 	                    //Read Minimum Heat Setpoint Limit  / eTRVMinHeatSetpointLimit must be between 5 and 35 and lower than eTRVMaxHeatSetpointLimit
   		zigbee.readAttribute(0x201, 0x0016) + 	                    //Read Maximum Heat Setpoint Limit  / eTRVMaxHeatSetpointLimit must be between 5 and 35 and higher than eTRVMinHeatSetpointLimit
//        zigbee.readAttribute(0x201, 0x001B) +	                    //Read ControlSequenceOfOperation
//        zigbee.readAttribute(0x201, 0x0020) +	                    //Read StartOfWeek
//        zigbee.readAttribute(0x201, 0x0021) +	                    //Read NumberOfWeeklyTransitions
//        zigbee.readAttribute(0x201, 0x0022) +	                    //Read NumberOfDailyTransitions
//        zigbee.readAttribute(0x201, 0x0025) +	                    //Read Programming Mode Operation
        zigbee.readAttribute(0x201, 0x0030) +                       // Read Setpoint Source 00 for user; 01 for internal schedule; 02 for Attribute Write or Setpoint Command

        //Manufacturer Specific Thermostat Cluster Attributes
        zigbee.readAttribute(0x0201, 0x4000, [mfgCode:0x1246]) +	//Read TRV Open Window Detection State
        zigbee.readAttribute(0x0201, 0x4003, [mfgCode:0x1246]) +    //Read TRV Open Window External Window Sensor
        zigbee.readAttribute(0x0201, 0x4010, [mfgCode:0x1246]) +    //Read TRV Exercise Day 00 for Sunday to 06 for Saturday, 07 for undefined
        zigbee.readAttribute(0x0201, 0x4011, [mfgCode:0x1246]) +    //Read TRV Exercise Time / Minutes from midnight     
        zigbee.readAttribute(0x0201, 0x4012, [mfgCode:0x1246]) +    //Read TRV Mounting Mode Active: 00 for mounted and 01 for not mounted or factory reset 
        zigbee.readAttribute(0x0201, 0x4013, [mfgCode:0x1246]) +    //Read TRV Mounting Mode Control: 00 for Ready for physical mounting on valve, 01 for mounted for as if mounted        
        zigbee.readAttribute(0x0201, 0x4014, [mfgCode:0x1246]) +	//Read TRV Orientation - false / 0  = Horizontal; true / 1 = vertical -  Danfos- [mfgCode:0x1246]
        zigbee.readAttribute(0x0201, 0x4015, [mfgCode:0x1246]) +	//Read TRV Attribute for External Measured Room Sensor
        zigbee.readAttribute(0x0201, 0x4016, [mfgCode:0x1246]) +	//Read Radiator Covered Attribute - false / 0  = not covered; true / 1 = covered -  Danfos- [mfgCode:0x1246]
        zigbee.readAttribute(0x0201, 0x4020, [mfgCode:0x1246]) +	//Read TRV Control Algorithm Aggression Factor 1 fast to 10 slow. If Bit 4 = 1 quick open feature is disabled        
        zigbee.readAttribute(0x0201, 0x4030, [mfgCode:0x1246]) +	//Read TRV Heat Available, 0 for no and 1 for yes
        zigbee.readAttribute(0x0201, 0x4031, [mfgCode:0x1246]) +	//Read TRV Calling for heat - false / 0  ; true / 1 Danfos- [mfgCode:0x1246]
        zigbee.readAttribute(0x0201, 0x4032, [mfgCode:0x1246]) +	//Read TRV Load Balancing Enabled:  00 disabled (radiator acts alone); 01 default on         
        zigbee.readAttribute(0x0201, 0x4040, [mfgCode:0x1246]) +	//Read TRV Load Radiator Radiator Mean:         
        zigbee.readAttribute(0x0201, 0x404A, [mfgCode:0x1246]) +	//Read TRV Load Estimate for this radiator:
        zigbee.readAttribute(0x0201, 0x404B, [mfgCode:0x1246]) +	//Read TRV Regulation Off-set -in steps of 0.1°C: range –2.5 °C to +2.5 °C (0xE7 … 0x19). 
        zigbee.readAttribute(0x0201, 0x404C, [mfgCode:0x1246]) +	//Read TRV Adaptation Run Control: default 00, 01 for initiate; 02 for cancel
        zigbee.readAttribute(0x0201, 0x404D, [mfgCode:0x1246]) +	//Read TRV Adaptation Run Status: bit 0 in progress, bit 1 Valve Characteristic found, bit 2 Valve Characteristic lost
        zigbee.readAttribute(0x0201, 0x404E, [mfgCode:0x1246]) +	//Read TRV Adaptation Run Settings: 00 default; 01 for enabled automatic     
        zigbee.readAttribute(0x0201, 0x404F, [mfgCode:0x1246]) +	//Read TRV Preheat Status: 00 for off, 01 for on (default) - reportable
        zigbee.readAttribute(0x0201, 0x4050, [mfgCode:0x1246]) +	//Read TRV Preheat Time: Time Stamp, default 00000000, max FFFFFFFF - reportable
        zigbee.readAttribute(0x0201, 0x4051, [mfgCode:0x1246]) +	//Read TRV Open Window Feature off/ on

        // Thermostat Display Attributes
	    zigbee.readAttribute(0x0204, 0x0001) +				        //Read KeypadLockout -  Child Lock State, 00 Unlocked to 05 Fully Locked
        zigbee.readAttribute(0x0204, 0x4000, [mfgCode:0x1246]) 	    //Read TRV Display Viewing Direction - false / 0  = Normal; true / 1 = Inverted  - Danfos- [mfgCode:0x1246]        

		// Other Possible Attributes - check the Danfos Specification
		//zigbee.readAttribute(0x000, 0x0000) +	//Read ZCLVersion
		//zigbee.readAttribute(0x000, 0x0001) +	//Read ApplicationVersion
		//zigbee.readAttribute(0x000, 0x0002) +	//Read StackVersion
		//zigbee.readAttribute(0x000, 0x0003) +	//Read HWVersion
		//zigbee.readAttribute(0x000, 0x0004) +	//Read ManufacturerName
		//zigbee.readAttribute(0x000, 0x0005) + //Read ModelIdentifier
		//zigbee.readAttribute(0x000, 0x0006) +	//Read DateCode
		//zigbee.readAttribute(0x000, 0x0007) +	//Read PowerSource
		//zigbee.readAttribute(0x000, 0x0010) +	//Read LocationDescription
		//zigbee.readAttribute(0x000, 0x0011) +	//Read PhysicalEnvironment
		//zigbee.readAttribute(0x000, 0x0012) +	//Read DeviceEnabled
		//zigbee.readAttribute(0x000, 0x0014) +	//Read DisableLocalConfig
		//zigbee.readAttribute(0x020, 0x0000) +	//Read Check-inInterval
		//zigbee.readAttribute(0x020, 0x0001) +	//Read LongPollInterval
		//zigbee.readAttribute(0x020, 0x0002) +	//Read ShortPollInterval
		//zigbee.readAttribute(0x020, 0x0003) +	//Read FastPollTimeout
		//zigbee.readAttribute(0x020, 0x0004) +	//Read Check-inIntervalMin
		//zigbee.readAttribute(0x020, 0x0005) +	//Read LongPollIntervalMin
		//zigbee.readAttribute(0x020, 0x0006) +	//Read FastPollTimeoutMax
		//zigbee.readAttribute(0x00a, 0x0000) +	//Read Time
		//zigbee.readAttribute(0x00a, 0x0001) +	//Read TimeStatus
		//zigbee.readAttribute(0x00a, 0x0002) +	//Read TimeZone
		//zigbee.readAttribute(0x00a, 0x0003) +	//Read DstStart
		//zigbee.readAttribute(0x00a, 0x0004) +	//Read DstEnd
		//zigbee.readAttribute(0x00a, 0x0005) +	//Read DstShift
		//zigbee.readAttribute(0x00a, 0x0006) +	//Read StandardTime
		//zigbee.readAttribute(0x00a, 0x0007) +	//Read LocalTime
		//zigbee.readAttribute(0x00a, 0x0008) +	//Read LastSetTime
		//zigbee.readAttribute(0x00a, 0x0009) +	//Read ValidUntilTime
        //zigbee.readAttribute(0x001, 0x0020) +	//Read BatteryVoltage
		//zigbee.readAttribute(0x001, 0x0030) +	//Read BatteryManufacturer
		//zigbee.readAttribute(0x001, 0x0031) +	//Read BatterySize
		//zigbee.readAttribute(0x001, 0x0032) +	//Read BatteryAHrRating
		//zigbee.readAttribute(0x001, 0x0033) +	//Read BatteryQuantity
		//zigbee.readAttribute(0x001, 0x0034) +	//Read BatteryRatedVoltage
		//zigbee.readAttribute(0x001, 0x0035) +	//Read BatteryAlarmMask
		//zigbee.readAttribute(0x001, 0x0036) +	//Read BatteryVoltageMinThreshold
	
	if (debugLogging) log.debug "refresh() --- cmds: $cmds"
    state.driverRefreshedDateTime = new Date().format("dd/MMM/yyyy hh:mm:ss")
	return cmds
}
